<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mybatis_demo.mapper.UserMapper">

<!--  private Long id;
    private String name;
    private String email;
    private String address;
    private String social_id;
    private String phone;
    private  String emp_num;

    private  int gendor;
    private int status;
    private Long bank_id;

    //自动填充的字段；填充内容在Config中
    @TableField(fill = FieldFill.INSERT)
    private Date creation_time;
    @TableField(fill = FieldFill.INSERT_UPDATE)
    private Date update_time;
    @TableLogic //逻辑删除的字段
    private int deleted;

    @Version
    private int version;

    @TableField(exist = false)
    private Role role;

    @TableField(exist = false)
    private Position pos;

    @TableField(exist = false)
    private Dept dept;
    @TableField(exist = false)
    private Bank bank;

}
-->

    <resultMap id="role_info" type="com.example.mybatis_demo.entity.Role">
        <id column="role_id" property="id"/>
        <result column="role_key" property="roleKey"/>
        <result column="role_name" property="name"/>
        <collection property="menuList"  ofType="com.example.mybatis_demo.entity.Menu">
            <id column="menu_id" property="id"/>
            <result column="menu_parent_id" property="parentId"/>
            <result column="menu_title" property="title"/>
            <result column="menu_level" property="level"/>
            <result column="menu_sort" property="sort"/>
            <result column="menu_name" property="name"/>
            <result column="menu_icon" property="icon"/>
            <result column="menu_hidden" property="hidden"/>
            <result column="menu_createTime" property="createTime"/>

        </collection>

    </resultMap>
    <select id="FetchRole" resultMap="role_info">
        select user_role.role_id ,role_key,credit.role.name  as role_name,menu.id as menu_id,
               menu.parent_id as menu_parent_id,menu.title as menu_title,
               menu.level as menu_level, menu.sort as menu_sort, menu.name as menu_name,
               menu.icon as menu_icon,menu.hidden as menu_hidden,menu.create_time as menu_create_time
        from user_role left join credit.role on user_role.role_id =credit.role.id
        left join role_menu on role_menu.role_id =credit.role.id
        left join menu on role_menu.menu_id = menu.id
        where user_role.user_id= #{userId}
    </select>


	
<resultMap id="UserInfo" type="com.example.mybatis_demo.entity.User">
	    <id column="user_id" property="id"/>
	    <result column="user_name" property="name"/>
	    <result column="user_social_id" property="socialId"/>
	    <result column="user_email" property="email"/>
	    <result column="user_address" property="address"/>
	    <result column="user_phone" property="phone"/>
	    <result column="user_gendor" property="gendor"/>
	    <result column="user_status" property="status"/>
	    <result column="user_emp_num" property="empNum"/>
	    <result column="user_bank_id" property="bankId"/>
	   	<result column="user_headimage" property="headImage"/>
	    
    <association property="bank" javaType="com.example.mybatis_demo.entity.Bank">
        <id column="bank_id" property="id"/>
        <result column="bank_name" property="name"/>
        <result column="bank_level" property="level"/>
    </association>

    <collection property="userPosList" ofType="com.example.mybatis_demo.entity.UserPos">
        <id column="up_id" property="id"/>
        <result column="up_st_time" property="stTime"/>
        <result column="up_end_time" property="endTime"/>
        <result column="up_enabled" property="enabled"/>
        <result column="up_parent_id" property="parentId"/>
        <result column="parent_pos_show_name" property="parentPosName"/>
        <result column="parent_pos_user_name" property="parentPosUserName"/>
        
        <association property="pos" javaType="com.example.mybatis_demo.entity.Position">
		        <!--指定Department中的属性映射，这里也可以使用单独拎出来，然后使用association中的resultMap属性指定-->
		        <id column="pos_id" property="id"/>
		        <result column="pos_name" property="name"/>
		        <result column="pos_show_name" property="showName"/>
    	</association>
         <association property="dept" javaType="com.example.mybatis_demo.entity.Dept">
		        <!--指定Department中的属性映射，这里也可以使用单独拎出来，然后使用association中的resultMap属性指定-->
		        <id column="dept_id" property="id"/>
		        <result column="dept_name" property="name"/>
		        <result column="dept_show_name" property="showName"/>
    	</association>
    	
    </collection>

</resultMap>

	
	<!-- list available user, no parent id information; -->
    <select id="FetchUserInfo" resultMap="UserInfo">
		select user.id as user_id,user.name as
		user_name, user.social_id as user_social_id,user.email as user_email, user.address as user_address,user.phone as user_phone,
		user.gendor as user_gendor, user.status as user_status, user.emp_num as user_emp_num,
		user.bank_id as user_bank_id,user.headimage as user_headimage,

		user_pos.id as up_id, user_pos.st_time as up_st_time, user_pos.end_time as up_end_time,
		user_pos.enabled as up_enabled,
		
		position.id as pos_id, position.name as pos_name,position.show_name as pos_show_name,
		dept.id as dept_id, dept.name as dept_name,dept.show_name as dept_show_name,
		bank.id as bank_id,bank.name as bank_name,bank.level as bank_level
	
		from
		user left join user_pos on user.id = user_pos.user_id
	 	left join dept on user_pos.dept_id = dept.id 
		left join position on user_pos.pos_id = position.id, bank 
		
		where
		user_pos.enabled=1  and user.status=1 and 
		bank.id=user.bank_id 
    </select>


<!-- list user information with support of filter -->
    <select id="listUser" resultMap="UserInfo">
       select user.id as user_id,user.name as
		user_name, user.social_id as user_social_id,user.email as user_email, user.address as user_address,user.phone as user_phone,
		user.gendor as user_gendor, user.status as user_status, user.emp_num as user_emp_num,
		user.bank_id as user_bank_id,user.headimage as user_headimage,

		user_pos.id as up_id, user_pos.st_time as up_st_time, user_pos.end_time as up_end_time,
		user_pos.enabled as up_enabled,
		
		position.id as pos_id, position.name as pos_name,position.show_name as pos_show_name,
		dept.id as dept_id, dept.name as dept_name,dept.show_name as dept_show_name,
		bank.id as bank_id,bank.name as bank_name,bank.level as bank_level
	
		from
		user left join user_pos on user.id = user_pos.user_id
		left join dept on user_pos.dept_id = dept.id 
		left join position on user_pos.pos_id = position.id, bank 
		
		where 
		bank.id=user.bank_id 
            <if test="ew!=null" >
                        <if test="ew.nonEmptyOfWhere">
                            AND
                        </if>
                        ${ew.SqlSegment}
            </if>
    </select>


<!-- get user  -->
    <select id="getUserDetail" resultMap="UserInfo">
       select user.id as user_id,user.name as
		user_name, user.social_id as user_social_id,user.email as user_email, user.address as user_address,user.phone as user_phone,
		user.gendor as user_gendor, user.status as user_status, user.emp_num as user_emp_num,
		user.bank_id as user_bank_id,user.headimage as user_headimage,

		user_pos.id as up_id, user_pos.st_time as up_st_time, user_pos.end_time as up_end_time,
		user_pos.enabled as up_enabled,user_pos.parent_id as up_parent_id,
		parent_user.name as parent_pos_user_name,
		parent_pos.show_name as  parent_pos_show_name,
		
		
		position.id as pos_id, position.name as pos_name,position.show_name as pos_show_name,
		dept.id as dept_id, dept.name as dept_name,dept.show_name as dept_show_name,
		bank.id as bank_id,bank.name as bank_name,bank.level as bank_level
		
		from user 
left join user_pos on user.id=user_pos.user_id 
left join dept on user_pos.dept_id=dept.id 
left join position on position.id=user_pos.pos_id
left join user_pos AS parent_up on parent_up.id=user_pos.parent_id 
left join user AS parent_user on parent_user.id=parent_up.user_id
left join position as parent_pos on parent_pos.id=parent_up.pos_id
left join bank on bank.id = user.bank_id 
where user.id=#{userId}
		
    </select>
    
	<resultMap id="UserPosition" type="com.example.mybatis_demo.entity.User">
			    <result column="user_name" property="name"/>
			    <result column="user_emp_num" property="empNum"/>
			    
        		<collection property="userPosList"  ofType="com.example.mybatis_demo.entity.UserPos">
        			<id column="user_pos_id" property="id"/>
			    	<result column="user_pos_parent_id" property="parentId"/>
        			
        			<association property="pos" javaType="com.example.mybatis_demo.entity.Position">
	        			<id column="pos_id" property="id"/>
	        			<result column="pos_show_name" property="showName"/>
        			</association>
        			
        			<association property="dept" javaType="com.example.mybatis_demo.entity.Dept">
	        			<id column="dept_id" property="id"/>
	        			<result column="dept_show_name" property="showName"/>
        			</association>
        					
			    </collection>
    </resultMap>
    
    <select id="listUserPosition" resultMap="UserPosition">
       select user.emp_num as user_emp_num,user.name as user_name,
        user_pos.id as user_pos_id,user_pos.parent_id as user_pos_parent_id,
        position.id as pos_id, position.show_name as pos_show_name,
     	dept.id as dept_id,dept.show_name as dept_show_name
        from
        user,user_pos left join dept on user_pos.dept_id = dept.id,
       	position where 
        user.id= user_pos.user_id and
        user_pos.pos_id = position.id and
          user.status=1 and user_pos.enabled=1 and user.id=user_pos.user_id 
	        <if test="ew!=null" >
	              <if test="ew.nonEmptyOfWhere">
	                  AND
	               </if>
	             ${ew.SqlSegment}
	        </if>
       </select>

    <insert id="insertSelective" parameterType="com.example.mybatis_demo.entity.User">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        <!-- private String name;
    private String email;
    private String address;
    private String social_id;
    private String phone;
    private  String emp_num;

    private  int gendor;
    private int status;
    private Long bank_id; -->
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null">
                name,
            </if>
            <if test="email != null">
                email,
            </if>

            <if test="address != null">
                address,
            </if>
            <if test="socialId != null">
                social_id,
            </if>
            <if test="phone != null">
                phone,
            </if>
            <if test="empNum != null">
                emp_num,
            </if>
            <if test="gendor != null">
                gendor,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="headImage!= null">
                headimage
            </if>
            <if test="bankId != null">
                bank_id
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="socialId != null">
                #{socialId,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="empNum != null">
                #{empNum,jdbcType=VARCHAR},
            </if>
            <if test="gendor != null">
                #{gendor,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="headImage != null">
                #{headImage,jdbcType=VARCHAR},
            </if>
            
            <if test="bankId != null">
                #{bankId,jdbcType=INTEGER},
            </if>

        </trim>
    </insert>
</mapper>
<!--
    #where p.pid= #{pid}

-->





